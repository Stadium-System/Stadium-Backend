name: Admin/Users
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: api/v1/admin/users
    metadata:
      groupName: Admin/Users
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: |-
        Get all users

        Retrieves a paginated list of all users.
      description: ''
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      'filter[name]':
        name: 'filter[name]'
        description: 'Filter by user name.'
        required: false
        example: John
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      'filter[phone_number]':
        name: 'filter[phone_number]'
        description: 'Filter by user phone number.'
        required: false
        example: '218925113276'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      'filter[type]':
        name: 'filter[type]'
        description: 'Filter by user type.'
        required: false
        example: admin
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      'filter[status]':
        name: 'filter[status]'
        description: 'Filter by user status.'
        required: false
        example: active
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      sort:
        name: sort
        description: 'Sort by fields. Prefix with "-" for descending order.'
        required: false
        example: 'name,-created_at'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      'filter[name]': John
      'filter[phone_number]': '218925113276'
      'filter[type]': admin
      'filter[status]': active
      sort: 'name,-created_at'
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/admin/users/{id}'
    metadata:
      groupName: Admin/Users
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: |-
        Get user by ID

        Retrieves the details of a specific user by its ID.
      description: ''
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
      - PATCH
    uri: 'api/v1/admin/users/{id}'
    metadata:
      groupName: Admin/Users
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: |-
        Update user by ID

        Updates the details of a specific user by its ID.
      description: ''
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'The updated name of the user.'
        required: true
        example: 'Jane Doe'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      phone_number:
        name: phone_number
        description: 'The updated phone number of the user. Must start with 2189 and be exactly 12 characters.'
        required: false
        example: '218912345678'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      0:
        name: '0'
        description: ''
        required: false
        example: null
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      password:
        name: password
        description: 'The updated password for the user. Must be at least 8 characters.'
        required: false
        example: newsecurepassword
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      type:
        name: type
        description: 'The updated type of user.'
        required: true
        example: user
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      status:
        name: status
        description: 'The updated status of the user. Must be either active, inactive, or banned.'
        required: false
        example: active
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      media_ids:
        name: media_ids
        description: 'The <code>id</code> of an existing record in the media table.'
        required: false
        example:
          - 16
        type: 'integer[]'
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      avatar_media_id:
        name: avatar_media_id
        description: 'The media ID of the updated avatar image (obtained from /api/v1/general/temp-uploads/images endpoint).'
        required: false
        example: 9
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      cover_media_id:
        name: cover_media_id
        description: 'The media ID of the updated cover image (obtained from /api/v1/general/temp-uploads/images endpoint).'
        required: false
        example: 10
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      name: 'Jane Doe'
      phone_number: '218912345678'
      password: newsecurepassword
      type: user
      status: active
      media_ids:
        - 16
      avatar_media_id: 9
      cover_media_id: 10
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/v1/admin/users/{id}'
    metadata:
      groupName: Admin/Users
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: |-
        Delete user by ID

        Deletes a specific user by its ID.
      description: ''
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PATCH
    uri: 'api/v1/admin/users/{user_id}/ban'
    metadata:
      groupName: Admin/Users
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: |-
        Ban User

        Bans a user so they cannot log in.
      description: ''
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user_id:
        name: user_id
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      user:
        name: user
        description: 'The ID of the user to ban.'
        required: true
        example: 3
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      user_id: 1
      user: 3
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "User banned successfully."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
            "message": "Unauthorized."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PATCH
    uri: 'api/v1/admin/users/{user_id}/unban'
    metadata:
      groupName: Admin/Users
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: |-
        Unban User

        Unbans a user, allowing them to log in.
      description: ''
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user_id:
        name: user_id
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      user:
        name: user
        description: 'The ID of the user to unban.'
        required: true
        example: 3
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      user_id: 1
      user: 3
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "User unbanned successfully."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
            "message": "Unauthorized."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/users
    metadata:
      groupName: Admin/Users
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: |-
        Get all users

        Retrieves a paginated list of all users.
      description: ''
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      'filter[name]':
        name: 'filter[name]'
        description: 'Filter by user name.'
        required: false
        example: John
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      'filter[phone_number]':
        name: 'filter[phone_number]'
        description: 'Filter by user phone number.'
        required: false
        example: '218925113276'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      'filter[type]':
        name: 'filter[type]'
        description: 'Filter by user type.'
        required: false
        example: admin
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      'filter[status]':
        name: 'filter[status]'
        description: 'Filter by user status.'
        required: false
        example: active
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      sort:
        name: sort
        description: 'Sort by fields. Prefix with "-" for descending order.'
        required: false
        example: 'name,-created_at'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      'filter[name]': John
      'filter[phone_number]': '218925113276'
      'filter[type]': admin
      'filter[status]': active
      sort: 'name,-created_at'
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/users/{id}'
    metadata:
      groupName: Admin/Users
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: |-
        Get user by ID

        Retrieves the details of a specific user by its ID.
      description: ''
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
      - PATCH
    uri: 'api/users/{id}'
    metadata:
      groupName: Admin/Users
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: |-
        Update user by ID

        Updates the details of a specific user by its ID.
      description: ''
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'The updated name of the user.'
        required: true
        example: 'Jane Doe'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      phone_number:
        name: phone_number
        description: 'The updated phone number of the user. Must start with 2189 and be exactly 12 characters.'
        required: false
        example: '218912345678'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      0:
        name: '0'
        description: ''
        required: false
        example: null
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      password:
        name: password
        description: 'The updated password for the user. Must be at least 8 characters.'
        required: false
        example: newsecurepassword
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      type:
        name: type
        description: 'The updated type of user.'
        required: true
        example: user
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      status:
        name: status
        description: 'The updated status of the user. Must be either active, inactive, or banned.'
        required: false
        example: active
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      media_ids:
        name: media_ids
        description: 'The <code>id</code> of an existing record in the media table.'
        required: false
        example:
          - 16
        type: 'integer[]'
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      avatar_media_id:
        name: avatar_media_id
        description: 'The media ID of the updated avatar image (obtained from /api/v1/general/temp-uploads/images endpoint).'
        required: false
        example: 9
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      cover_media_id:
        name: cover_media_id
        description: 'The media ID of the updated cover image (obtained from /api/v1/general/temp-uploads/images endpoint).'
        required: false
        example: 10
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      name: 'Jane Doe'
      phone_number: '218912345678'
      password: newsecurepassword
      type: user
      status: active
      media_ids:
        - 16
      avatar_media_id: 9
      cover_media_id: 10
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/users/{id}'
    metadata:
      groupName: Admin/Users
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: |-
        Delete user by ID

        Deletes a specific user by its ID.
      description: ''
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PATCH
    uri: 'api/users/{user_id}/ban'
    metadata:
      groupName: Admin/Users
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: |-
        Ban User

        Bans a user so they cannot log in.
      description: ''
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user_id:
        name: user_id
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      user:
        name: user
        description: 'The ID of the user to ban.'
        required: true
        example: 3
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      user_id: 1
      user: 3
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "User banned successfully."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
            "message": "Unauthorized."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PATCH
    uri: 'api/users/{user_id}/unban'
    metadata:
      groupName: Admin/Users
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: |-
        Unban User

        Unbans a user, allowing them to log in.
      description: ''
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user_id:
        name: user_id
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      user:
        name: user
        description: 'The ID of the user to unban.'
        required: true
        example: 3
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      user_id: 1
      user: 3
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "User unbanned successfully."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
            "message": "Unauthorized."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
